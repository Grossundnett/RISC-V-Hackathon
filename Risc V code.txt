To display the readings of the Arduino or replace the radar as shown in the site, you will need to create an Android app that can receive and process the data sent by the Arduino via Bluetooth. There are different ways to do this, but one of the easiest and most popular methods is to use MIT App Inventor, a web-based tool that allows you to create Android apps using a graphical interface and blocks-based programming.
To use MIT App Inventor, you will need to create an account and follow the instructions on how to set up your phone and computer. You can find more information about MIT App Inventor from this site. Once you have everything ready, you can start designing your app and adding the components and blocks that you need.
One of the essential components for your app is the BluetoothClient component, which allows you to connect to the Arduino Bluetooth module and send and receive data. You will also need some user interface components, such as labels, buttons, sliders, or canvas, to display the readings or the radar on your phone. You can customize the appearance and behavior of these components using the properties and blocks panels.
To display the readings of the Arduino, you will need to use the ReceiveText block, which returns the text that the Arduino sends via Bluetooth. You can then use the SetText block to display the text on a label or a slider. You can also use the Split block to separate the text into different values if you are sending multiple readings at once.
To replace the radar as shown in the site, you will need to use the Canvas component, which allows you to draw shapes and images on the screen. You can use the DrawCircle block to draw the circles that represent the range of the radar, and the DrawLine block to draw the line that represents the direction of the sensor. You can also use the DrawImage block to draw an image of the object that the sensor detects. You will need to use some math blocks to calculate the coordinates and angles of the shapes and images based on the data that the Arduino sends.
You can find some examples and tutorials on how to use MIT App Inventor to create apps that communicate with Arduino via Bluetooth from these sites and 1. You can also use the search_web tool to find more resources and tips on how to create your own app. I hope this helps you with your project. 😊




















//code for ultrasonic sensor to detect target’s position
#define trigPin 9
#define echoPin 10


void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}


void loop() {
  long duration, distance;


  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);


  duration = pulseIn(echoPin, HIGH);


  distance = (duration * 0.0343) / 2; // Speed of sound is approximately 0.0343 cm/μs


  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");


  delay(1000); // Delay for 1 second before taking the next measurement
}






























//code to change the rotational position of the main cannon 
#define trigPin 9
#define echoPin 10
#include <Servo.h>


Servo myServo;  // Create a servo object


void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  myServo.attach(8); // Attach the servo to pin 8
}


void loop() {
  // Rotate the servo at a regular frequency
  for(int angle = 0; angle <= 180; angle += 5) {
    myServo.write(angle);
    delay(100); // Adjust this delay to control the rotation speed
  }


  // Ultrasonic sensor measurements can be taken independently here
  long duration, distance;


  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);


  duration = pulseIn(echoPin, HIGH);
  distance = (duration * 0.0343) / 2;


  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");


  delay(1000); // Delay before taking the next ultrasonic measurement
}












//Code to implement the bluetooth T/R
#include <SoftwareSerial.h>


SoftwareSerial bluetoothSerial(2, 3); // RX, TX pins


void setup() {
  Serial.begin(9600);     
  bluetoothSerial.begin(9600); 
}


void loop() {
  if (bluetoothSerial.available()) {
    char receivedChar = bluetoothSerial.read();
    Serial.print("Received: ");
    Serial.println(receivedChar);


    if (receivedChar == 'A') {
      digitalWrite(13, HIGH); 
    } else if (receivedChar == 'B') {
      digitalWrite(13, LOW);
    }
  }


   if (Serial.available()) {
    char sendChar = Serial.read();
    Serial.print("Sending: ");
    Serial.println(sendChar);
    bluetoothSerial.write(sendChar); 
  }
}




























//Code for trigger and reload mechanism for both DC motor or Servo as the reloading motors


#include <Servo.h>


const int motorPin = 9;  
const int buttonPin = 2;


void setup() {
  pinMode(motorPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
}


void loop() {
  if (digitalRead(buttonPin) == LOW) {
    pullTrigger(); // Call the function to pull the trigger
  }
}


void pullTrigger() {
  digitalWrite(motorPin, HIGH); 
  delay(1000);                
  digitalWrite(motorPin, LOW);  
  delay(1000);                  
}


#include <Servo.h>


Servo triggerServo;
const int buttonPin = 2; 
int servoAngle = 0;      


void setup() {
  triggerServo.attach(9); 
  pinMode(buttonPin, INPUT_PULLUP);
  triggerServo.write(servoAngle); 
}


void loop() {
  if (digitalRead(buttonPin) == LOW) {
    pullTrigger();
  }
}


void pullTrigger() {
  servoAngle = 90;             
  triggerServo.write(servoAngle); 
  delay(1000);              
  servoAngle = 0;             
  triggerServo.write(servoAngle); 
  delay(1000);             
}